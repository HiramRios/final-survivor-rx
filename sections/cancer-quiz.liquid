<!-- sections/cancer-quiz.liquid -->
<div class="cancer-question">
  <div class="container">
    <div class="cancer-question__image">
      {% if section.settings.image %}
        <img src="{{ section.settings.image | img_url: 'master' }}" alt="{{ section.settings.heading }}">
      {% endif %}
    </div>

    <div class="cancer-question__content">
      <div class="cancer-question__content-wrapper">
        <div class="cancer-question__text">
          <h2>{{ section.settings.heading }}</h2>
          <p>{{ section.settings.subheading }}</p>
          <button class="why-we-ask-btn" style="display:none;">Why we ask</button>
          <div class="why-we-ask-modal" style="display:none;">
            <div class="why-we-ask-modal-content">
              <span class="why-we-ask-close">&times;</span>
              <p class="why-we-ask-text"></p>
            </div>
          </div>
        </div>

        <div class="cancer-question__blocks" id="quiz-container">
          {% if section.blocks.size == 0 %}
            <p class="cancer-question__no-blocks" style="text-align:center;color:#999;">No quiz options defined. Please add Answer Option blocks in the Theme Editor.</p>
          {% endif %}
        </div>
      </div>

      <div class="canver-question__buttons">
        <p style="color: #333333; text-align: center"><strong>Need quick help? Chat with us!</strong></p>
      </div>
    </div>
  </div>
</div>

<!-- Styles for the updated layout -->
<style>
  .cancer-question .container {
    background-color: {{ section.settings.bg_color }};
    display: flex;
    padding: {{ section.settings.padding_top }}px 0 {{ section.settings.padding_bottom }}px;
  }

  .cancer-question__block {
    cursor: pointer;
    display: flex;
    align-items: center;
    padding: 20px;
    border: 2px solid #ccc;
    border-radius: 20px; 
    margin-bottom: 20px;
    background-color: #fff;
    width: 100%;
    transition: background-color 0.2s ease;
  }

  .cancer-question__block:hover {
    background-color: #f0f0f0;
  }

  .cancer-question__block-content {
    display: flex;
    align-items: center;
    width: 100%;
  }

  .cancer-question__block-icon {
    width: 40px;
    height: 40px;
    background-color: #fff;
    border: 2px solid #ccc;
    border-radius: 50%;
    margin-right: 20px;
  }

  .cancer-question__block-text {
    display: flex;
    flex-direction: column;
    width: calc(100% - 60px);
  }

  .cancer-question__block-text--title {
    font-weight: bold;
    font-size: 16px;
  }

  .cancer-question__block-text--desc {
    color: #666;
    font-size: 14px;
  }

  .cancer-question__chat-button {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    background: #333;
    color: #fff;
    cursor: pointer;
    text-align: center;
    width: 100%;
  }

  .cancer-question__buttons {
    margin-top: 20px;
  }

  .why-we-ask-btn {
    margin-top: 10px;
    margin-bottom: 25px;
    padding: 10px 18px;
    border: 2px solid #333;
    border-radius: 20px;
    background: #fff;
    color: #333;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .why-we-ask-btn:hover {
    background: #333;
    color: #fff;
  }

  .why-we-ask-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .why-we-ask-modal-content {
    background: #fff;
    padding: 30px;
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    position: relative;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .why-we-ask-close {
    position: absolute;
    top: 10px;
    right: 10px;
    cursor: pointer;
    font-size: 24px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var questionBlocks = [
      {% assign question_blocks = section.blocks | where: 'type', 'question' %}
      {% for block in question_blocks %}
        {
          step: {{ block.settings.step }},
          parent: {{ block.settings.parent | json }},
          title: {{ block.settings.title | json }},
          description: {{ block.settings.description | json }},
          heading: {{ block.settings.step_heading | json }},
          subheading: {{ block.settings.step_subheading | json }},
          why: {{ block.settings.step_why | json }},
          value: {{ block.settings.value | json }},
          url: {{ block.settings.url | json }}
        }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ];

    // Allow multiple parent answers separated by "|"
    questionBlocks.forEach(function (q) {
      if (typeof q.parent === 'string') {
        q.parent = q.parent.split('|').map(function (p) {
          return p.trim();
        }).filter(Boolean);
      }
    });

    var resultMappings = [
      {% assign result_blocks = section.blocks | where: 'type', 'result' %}
      {% for block in result_blocks %}
        { combo: {{ block.settings.combination | json }}, url: {{ block.settings.url | json }} }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ];

    resultMappings = resultMappings.map(function (r) {
      var map = {};
      r.combo.split('|').forEach(function (part, index) {
        var step, value;
        if (part.indexOf('=') > -1) {
          var pieces = part.split('=');
          step = pieces[0].trim();
          value = pieces[1].trim();
        } else {
          step = (index + 1).toString();
          value = part.trim();
        }
        map[step] = value;
      });
      r.map = map;
      return r;
    });

    function checkResult(ans) {
      for (var i = 0; i < resultMappings.length; i++) {
        var rm = resultMappings[i];
        var match = true;
        for (var step in rm.map) {
          if (ans[step] !== rm.map[step]) {
            match = false;
            break;
          }
        }
        if (match) return rm.url;
      }
      return null;
    }

    var container = document.getElementById('quiz-container');
    var currentStep = 1;
    var lastUrl = null;
    var answers = {};
    var whyBtnEl = document.querySelector('.cancer-question__text .why-we-ask-btn');
    var whyModalEl = document.querySelector('.why-we-ask-modal');
    var whyTextEl = document.querySelector('.why-we-ask-text');
    var whyCloseEl = document.querySelector('.why-we-ask-close');

    if (whyBtnEl && whyModalEl) {
      whyBtnEl.addEventListener('click', function () {
        whyModalEl.style.display = 'flex';
      });
    }
    if (whyCloseEl && whyModalEl) {
      whyCloseEl.addEventListener('click', function () {
        whyModalEl.style.display = 'none';
      });
      whyModalEl.addEventListener('click', function (e) {
        if (e.target === whyModalEl) whyModalEl.style.display = 'none';
      });
    }

    function render(step, parentTitle) {
      container.innerHTML = '';

      var choices = questionBlocks.filter(function (b) {
        return b.step === step && (step === 1 || b.parent.includes(parentTitle));
      });

      if (!choices.length) {
        var finalUrl = checkResult(answers) || lastUrl;
        if (finalUrl) {
          window.location.href = finalUrl;
        }
        return;
      }

      // Dynamic heading, subheading, and "why we ask" update
      var headingEl = document.querySelector('.cancer-question__text h2');
      var subheadingEl = document.querySelector('.cancer-question__text p');
      if (choices[0].heading && headingEl) headingEl.textContent = choices[0].heading;
      if (choices[0].subheading && subheadingEl) subheadingEl.textContent = choices[0].subheading;
      if (whyBtnEl && whyModalEl && whyTextEl) {
        if (choices[0].why) {
          whyTextEl.textContent = choices[0].why;
          whyBtnEl.style.display = 'inline-block';
        } else {
          whyBtnEl.style.display = 'none';
          whyModalEl.style.display = 'none';
        }
      }

      choices.forEach(function (b) {
        var card = document.createElement('div');
        card.className = 'cancer-question__block';
        card.dataset.url = b.url;
        card.dataset.title = b.title;
        card.dataset.value = b.value;
        card.innerHTML = `
          <div class="cancer-question__block-content">
            <div class="cancer-question__block-icon"></div>
            <div class="cancer-question__block-text">
              <p class="cancer-question__block-text--title">${b.title}</p>
              <p class="cancer-question__block-text--desc">${b.description}</p>
            </div>
          </div>`;
        container.appendChild(card);
      });
    }

    container.addEventListener('click', function (e) {
      var card = e.target.closest('.cancer-question__block');
      if (!card) return;
      answers[currentStep] = card.dataset.value;
      var partialUrl = checkResult(answers);
      if (partialUrl) {
        window.location.href = partialUrl;
        return;
      }
      lastUrl = card.dataset.url;
      currentStep++;
      render(currentStep, card.dataset.title);
    });

    if (questionBlocks.length) render(1);

    var chatBtn = document.querySelector('.cancer-question__chat-button');
    if (chatBtn) {
      chatBtn.addEventListener('click', function () {
        if (typeof Intercom !== 'undefined') Intercom('show');
      });
    }
  });
</script>



{% schema %}
{
  "name": "Cancer Quiz",
  "settings": [
    { "type": "color", "id": "bg_color", "label": "Background Color", "default": "#ffffff" },
    { "type": "range", "id": "padding_top", "label": "Padding Top (px)", "min": 0, "max": 100, "step": 5, "unit": "px", "default": 20 },
    { "type": "range", "id": "padding_bottom", "label": "Padding Bottom (px)", "min": 0, "max": 100, "step": 5, "unit": "px", "default": 20 },
    { "type": "image_picker", "id": "image", "label": "Header Image" },
    { "type": "text", "id": "heading", "label": "Heading", "default": "Need help finding the right product?" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "Answer a few quick questions below." }
  ],
  "blocks": [
    {
      "type": "question",
      "name": "Answer Option",
      "settings": [
        { "type": "range", "id": "step", "label": "Step Number", "min": 1, "max": 10, "step": 1, "default": 1 },
        { "type": "text", "id": "parent", "label": "Parent Answer Title(s) (leave blank for step 1)", "info": "Separate multiple titles with |" },
        { "type": "text", "id": "title", "label": "Answer Text" },
        { "type": "textarea", "id": "description", "label": "Description" },
        { "type": "text", "id": "value", "label": "Answer Value" },
        { "type": "url", "id": "url", "label": "URL to Link To (optional)" },
        { "type": "text", "id": "step_heading", "label": "Step Heading (optional)" },
        { "type": "text", "id": "step_subheading", "label": "Step Subheading (optional)" },
        { "type": "textarea", "id": "step_why", "label": "Why we ask (optional)" }
      ]
    },
    {
      "type": "result",
      "name": "Result Mapping",
      "settings": [
        { "type": "text", "id": "combination", "label": "Answer Combination (value1|value2|... or step=value|step=value)" },
        { "type": "url", "id": "url", "label": "Result URL" }
      ]
    }
  ],
  "presets": [
    { "name": "Cancer Quiz" }
  ]
}
{% endschema %}